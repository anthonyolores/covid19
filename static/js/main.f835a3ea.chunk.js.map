{"version":3,"sources":["api/index.ts","component/control/selectcountry.tsx","hooks.tsx","component/casebox/casebox.tsx","component/graph/graph.tsx","App.tsx","serviceWorker.js","index.js"],"names":["baseUrl","fetchCountries","a","axios","get","result","data","map","d","Country","undefined","fetchCasesByCountry","country","status","dateRange","statusQuery","dateQuery","from","to","currentDate","moment","format","countryQuery","caseItem","Confirmed","Deaths","Recovered","Active","Date","fetchCasesWorld","Global","NewConfirmed","TotalConfirmed","NewDeaths","TotalDeaths","NewRecovered","TotalRecovered","console","log","SelectCountry","props","countries","useState","setCountries","useEffect","fetchCountriesFn","useCountries","options","key","c","sort","Form","Group","controlId","Control","as","onChange","event","onCountryChanged","target","value","custom","addComma","Intl","NumberFormat","CaseBox","onSelectStatus","caseItems","setCaseItems","totalCaseItem","setTotalCaseItem","totalCaseItemGlobal","setTotalCaseItemGlobal","isLoading","setIsLoading","globalCaseItem","fetchData","length","lastIndex","getTotalCaseItem","className","ListGroup","Item","style","backgroundColor","border","color","transformCaseBoxGlobal","caseItemToLineData","labels","ci","date","getMonth","getDate","datasets","label","legend","display","Graph","caseItemGlobal","App","setCountry","useCountry","useCaseItem","setCaseItemGlobal","useCaseItemGlobal","Container","Row","Col","xs","md","lg","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f835a3ea.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport moment from 'moment';\r\nimport {\r\n\tCountry,\r\n\tDateRange,\r\n\tCaseStatus,\r\n\tCaseItem,\r\n\tCaseItemGlobal,\r\n} from '../type';\r\n\r\nconst baseUrl = 'https://api.covid19api.com/';\r\n\r\nexport const fetchCountries = async (): Promise<Array<Country> | undefined> => {\r\n\ttry {\r\n\t\tconst result = (await axios.get(`${baseUrl}countries`)) as {\r\n\t\t\tdata: Array<any>;\r\n\t\t};\r\n\t\treturn result.data.map((d) => ({ Country: d.Country })) as Array<Country>;\r\n\t} catch {\r\n\t\treturn undefined;\r\n\t}\r\n};\r\n\r\nconst dateFormat = 'YYYY-MM-DD';\r\n\r\nexport const fetchCasesByCountry = async (\r\n\tcountry: string,\r\n\tstatus?: CaseStatus,\r\n\tdateRange?: DateRange\r\n): Promise<Array<CaseItem> | undefined | null> => {\r\n\ttry {\r\n\t\tconst statusQuery = status ? 'status/' + status : '';\r\n\t\tconst dateQuery = dateRange\r\n\t\t\t? 'from=' + dateRange.from + '&to' + dateRange.to\r\n\t\t\t: '';\r\n\t\tconst currentDate = moment().format(dateFormat) + 'T00:00:00Z';\r\n\t\tconst countryQuery =\r\n\t\t\t!country || country === 'Global'\r\n\t\t\t\t? ''\r\n\t\t\t\t: `country/${country}?from = ${currentDate} & to = ${currentDate}`;\r\n\t\tconst result = (await axios.get(\r\n\t\t\t`${baseUrl + statusQuery + countryQuery + dateQuery}`\r\n\t\t)) as any;\r\n\t\treturn result.data.map((caseItem: any) => {\r\n\t\t\tconst { Confirmed, Deaths, Recovered, Active, Date, Country } = caseItem;\r\n\t\t\treturn {\r\n\t\t\t\tConfirmed,\r\n\t\t\t\tDeaths,\r\n\t\t\t\tRecovered,\r\n\t\t\t\tActive,\r\n\t\t\t\tDate,\r\n\t\t\t\tCountry,\r\n\t\t\t};\r\n\t\t}) as Array<CaseItem>;\r\n\t} catch {\r\n\t\treturn undefined;\r\n\t}\r\n};\r\n\r\nexport const fetchCasesWorld = async (): Promise<\r\n\tCaseItemGlobal | undefined\r\n> => {\r\n\ttry {\r\n\t\tconst {\r\n\t\t\tNewConfirmed,\r\n\t\t\tTotalConfirmed,\r\n\t\t\tNewDeaths,\r\n\t\t\tTotalDeaths,\r\n\t\t\tNewRecovered,\r\n\t\t\tTotalRecovered,\r\n\t\t} = ((await axios.get(`${baseUrl}summary`)) as {\r\n\t\t\tdata: {\r\n\t\t\t\tGlobal: any;\r\n\t\t\t\tCountries: any;\r\n\t\t\t};\r\n\t\t}).data.Global;\r\n\t\tconsole.log({\r\n\t\t\tNewConfirmed,\r\n\t\t\tTotalConfirmed,\r\n\t\t\tNewDeaths,\r\n\t\t\tTotalDeaths,\r\n\t\t\tNewRecovered,\r\n\t\t\tTotalRecovered,\r\n\t\t});\r\n\t\treturn {\r\n\t\t\tNewConfirmed,\r\n\t\t\tTotalConfirmed,\r\n\t\t\tNewDeaths,\r\n\t\t\tTotalDeaths,\r\n\t\t\tNewRecovered,\r\n\t\t\tTotalRecovered,\r\n\t\t};\r\n\t} catch {\r\n\t\treturn undefined;\r\n\t}\r\n};\r\n","import React, { FunctionComponent } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { useCountries } from '../../hooks';\r\n\r\nexport type SelectCountryProps = {\r\n\tonCountryChanged: (country: string) => void;\r\n};\r\n\r\nconst SelectCountry: FunctionComponent<SelectCountryProps> = (\r\n\tprops: SelectCountryProps\r\n) => {\r\n\tconst countries = useCountries();\r\n\r\n\tconst handleCountryChanged = (event: React.ChangeEvent<any>) => {\r\n\t\tprops.onCountryChanged(event.target.value);\r\n\t};\r\n\r\n\tif (!countries) return <>Loading Countries</>;\r\n\r\n\tconst options = [\r\n\t\t<option key={'Global'}>Global</option>,\r\n\t\t...countries\r\n\t\t\t.map((c) => c.Country)\r\n\t\t\t.sort()\r\n\t\t\t.map((c) => {\r\n\t\t\t\treturn <option key={c}>{c}</option>;\r\n\t\t\t}),\r\n\t];\r\n\r\n\treturn (\r\n\t\t<Form>\r\n\t\t\t<Form.Group controlId='exampleForm.SelectCustomSizeLg'>\r\n\t\t\t\t<Form.Control as='select' onChange={handleCountryChanged} custom>\r\n\t\t\t\t\t{options}\r\n\t\t\t\t</Form.Control>\r\n\t\t\t</Form.Group>\r\n\t\t</Form>\r\n\t);\r\n};\r\n\r\nexport default SelectCountry;\r\n","import { useState, useEffect } from 'react';\r\nimport { Country, CaseItem, CaseItemGlobal } from './type';\r\nimport { fetchCountries } from './api';\r\n\r\nexport const useCountries = (): Array<Country> | undefined => {\r\n\tconst [countries, setCountries] = useState<Array<Country> | undefined>(\r\n\t\tundefined\r\n\t);\r\n\tuseEffect(() => {\r\n\t\tconst fetchCountriesFn = async () => setCountries(await fetchCountries());\r\n\t\tfetchCountriesFn();\r\n\t}, []);\r\n\r\n\treturn countries;\r\n};\r\n\r\nexport const useCountry = () => {\r\n\tconst [country, setCountry] = useState<string>('Global');\r\n\treturn {\r\n\t\tcountry,\r\n\t\tsetCountry,\r\n\t};\r\n};\r\n\r\nexport const useCaseItem = () => {\r\n\tconst [caseItems, setCaseItems] = useState<ReadonlyArray<CaseItem>>();\r\n\treturn {\r\n\t\tcaseItems,\r\n\t\tsetCaseItems,\r\n\t};\r\n};\r\n\r\nexport const useCaseItemGlobal = () => {\r\n\tconst [caseItemGlobal, setCaseItemGlobal] = useState<CaseItemGlobal>();\r\n\treturn {\r\n\t\tcaseItemGlobal,\r\n\t\tsetCaseItemGlobal,\r\n\t};\r\n};\r\n","import React, { FunctionComponent, useEffect, useState } from 'react';\r\nimport { CaseItem, CaseItemGlobal } from '../../type';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport { fetchCasesByCountry, fetchCasesWorld } from '../../api';\r\nimport { FaCross } from 'react-icons/fa';\r\nimport { FaHeartbeat } from 'react-icons/fa';\r\nimport { FaCalculator } from 'react-icons/fa';\r\nimport { BsFillLightningFill } from 'react-icons/bs';\r\nimport './casebox.scss';\r\n\r\nexport type CaseBoxPros = {\r\n\tcountry: string;\r\n\tonSelectStatus: (caseItems: Array<CaseItem>, caseItemGlobal: CaseItemGlobal | undefined) => void;\r\n};\r\n\r\nconst getTotalCaseItem = (\r\n\tcaseItems: Array<CaseItem> | undefined | null\r\n): CaseItem | undefined => {\r\n\tif (!caseItems?.length) return undefined;\r\n\r\n\tconst lastIndex = caseItems.length - 1;\r\n\tconst caseItem: CaseItem = {\r\n\t\tActive: caseItems[lastIndex].Active,\r\n\t\tConfirmed: caseItems[lastIndex].Confirmed,\r\n\t\tDeaths: caseItems[lastIndex].Deaths,\r\n\t\tRecovered: caseItems[lastIndex].Recovered,\r\n\t\tCountry: caseItems[lastIndex].Country,\r\n\t\tDate: caseItems[lastIndex].Date,\r\n\t};\r\n\r\n\treturn caseItem;\r\n};\r\n\r\nconst addComma = (value: number): string => {\r\n\treturn new Intl.NumberFormat().format(value);\r\n};\r\n\r\nconst CaseBox: FunctionComponent<CaseBoxPros> = ({ country, onSelectStatus}: CaseBoxPros) => {\r\n\tconst [caseItems, setCaseItems] = useState<\r\n\t\tArray<CaseItem> | undefined | null\r\n\t>(null);\r\n\tconst [totalCaseItem, setTotalCaseItem] = useState<CaseItem| undefined>(\r\n\t\tundefined\r\n\t);\r\n\tconst [totalCaseItemGlobal, setTotalCaseItemGlobal] = useState<CaseItemGlobal| undefined>(\r\n\t\tundefined\r\n\t);\r\n\tconst [isLoading, setIsLoading] = useState<boolean>(false);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst fetchData = async (country: string) => {\r\n\t\t\tsetIsLoading(true);\r\n\t\t\tif (country !== 'Global') {\r\n\t\t\t\tconst caseItems = await fetchCasesByCountry(country);\r\n\t\t\t\tsetCaseItems(caseItems);\r\n\t\t\t\tonSelectStatus(caseItems || [], undefined);\r\n\t\t\t} else {\r\n\t\t\t\tconst globalCaseItem = await fetchCasesWorld();\r\n\t\t\t\tsetTotalCaseItemGlobal(globalCaseItem);\r\n\t\t\t\tonSelectStatus([], globalCaseItem);\r\n\t\t\t}\r\n\t\t\tsetIsLoading(false);\r\n\t\t};\r\n\t\tfetchData(country);\r\n\t}, [country]);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetTotalCaseItem(getTotalCaseItem(caseItems));\r\n\t}, [caseItems]);\r\n\r\n\tconst transformCaseBox = (caseItem: CaseItem | undefined) => {\r\n\t\treturn (\r\n\t\t\t(caseItem && (\r\n\t\t\t\t<div className='casebox'>\r\n\t\t\t\t\t<ListGroup.Item className='case-item'>\r\n\t\t\t\t\t\t<div className='status-title total'>\r\n\t\t\t\t\t\t\t<FaCalculator /> <span>Total Cases</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className='total'> {addComma(caseItem.Confirmed)} </div>\r\n\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t{!!caseItem.Active && (\r\n\t\t\t\t\t\t<ListGroup.Item className='case-item'>\r\n\t\t\t\t\t\t\t<div className='status-title'>\r\n\t\t\t\t\t\t\t\t<BsFillLightningFill /> <span> Active </span>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className='active'> {addComma(caseItem.Active)} </div>\r\n\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t<ListGroup.Item className='case-item'>\r\n\t\t\t\t\t\t<div className='status-title'>\r\n\t\t\t\t\t\t\t<FaHeartbeat /> <span> Recovered </span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className='recovered'> {addComma(caseItem.Recovered)} </div>\r\n\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t<ListGroup.Item className='case-item'>\r\n\t\t\t\t\t\t<div className='status-title'>\r\n\t\t\t\t\t\t\t<FaCross /> <span>Deaths </span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className='deaths'> {addComma(caseItem.Deaths)} </div>\r\n\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t</div>\r\n\t\t\t)) || (\r\n\t\t\t\t<ListGroup.Item\r\n\t\t\t\t\tstyle={{ backgroundColor: '#f8f8f8', border: 'none', color: '#888' }}>\r\n\t\t\t\t\tNo record found\r\n\t\t\t\t</ListGroup.Item>\r\n\t\t\t)\r\n\t\t);\r\n\t};\r\n\r\n\tconst transformCaseBoxGlobal = (caseItem: CaseItemGlobal | undefined) => {\r\n\t\treturn (\r\n\t\t\t(caseItem && (\r\n\t\t\t\t<div className='casebox'>\r\n\t\t\t\t\t<ListGroup.Item className='case-item'>\r\n\t\t\t\t\t\t<div className='status-title total'>\r\n\t\t\t\t\t\t\t<FaCalculator /> <span>Total Confirmed</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className='active'> {addComma(caseItem.TotalConfirmed)} <span className='new'>(new {addComma(caseItem.NewConfirmed)})</span></div>\r\n\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t<ListGroup.Item className='case-item'>\r\n\t\t\t\t\t\t<div className='status-title total'>\r\n\t\t\t\t\t\t\t<FaHeartbeat /> <span>Total Recovered</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className='recovered'> {addComma(caseItem.TotalRecovered)} <span className='new'>(new {addComma(caseItem.NewRecovered)})</span></div>\r\n\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t<ListGroup.Item className='case-item'>\r\n\t\t\t\t\t\t<div className='status-title total'>\r\n\t\t\t\t\t\t\t<FaCross /> <span>Total Deaths</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className='deaths'> {addComma(caseItem.TotalDeaths)} <span className='new'>(new {addComma(caseItem.NewDeaths)})</span></div>\r\n\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t</div>\r\n\t\t\t)) || (\r\n\t\t\t\t<ListGroup.Item\r\n\t\t\t\t\tstyle={{ backgroundColor: '#f8f8f8', border: 'none', color: '#888' }}>\r\n\t\t\t\t\tNo data found\r\n\t\t\t\t</ListGroup.Item>\r\n\t\t\t)\r\n\t\t);\r\n\t};\r\n\r\n\tif (isLoading)\r\n\t\treturn <div> Loading data... </div>;\r\n\r\n\tif(country !== 'Global')\r\n\t\treturn transformCaseBox(totalCaseItem);\r\n\telse\r\n\t\treturn transformCaseBoxGlobal(totalCaseItemGlobal);\r\n\r\n};\r\n\r\nexport default CaseBox;\r\n","import React, { FunctionComponent } from 'react';\r\nimport { CaseItem, CaseItemGlobal } from '../../type';\r\nimport { HorizontalBar, Line } from 'react-chartjs-2';\r\nimport './graph.scss';\r\n\r\ntype GraphProps = {\r\n\tcaseItems?: ReadonlyArray<CaseItem>;\r\n\tcaseItemGlobal?: CaseItemGlobal\r\n};\r\n\r\nconst caseItemToLineData = (caseItems: ReadonlyArray<CaseItem>) => {\r\n\treturn {\r\n\t\tlabels: [\r\n\t\t\t...caseItems.map((ci) => {\r\n\t\t\t\tconst date = new Date(ci.Date);\r\n\t\t\t\treturn date.getMonth() + 1 + '/' + date.getDate();\r\n\t\t\t}),\r\n\t\t],\r\n\t\tdatasets: [\r\n\t\t\t{\r\n\t\t\t\tlabel: 'Total',\r\n\t\t\t\tbackgroundColor: '#eee',\r\n\t\t\t\tdata: [...caseItems.map((ci) => ci.Confirmed)],\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tlabel: 'Active',\r\n\t\t\t\tbackgroundColor: '#54ff57',\r\n\t\t\t\tdata: [...caseItems.map((ci) => ci.Active)],\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tlabel: 'Recovered',\r\n\t\t\t\tbackgroundColor: '#1da1ff',\r\n\t\t\t\tdata: [...caseItems.map((ci) => ci.Recovered)],\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tlabel: 'Death',\r\n\t\t\t\tbackgroundColor: '#ff6854',\r\n\t\t\t\tdata: [...caseItems.map((ci) => ci.Deaths)],\r\n\t\t\t},\r\n\t\t],\r\n\t};\r\n};\r\n\r\nconst caseItemToBarData = (caseItem: CaseItemGlobal) => {\r\n\treturn {\r\n\t\tlabels: [\r\n\t\t\t'Total Confirmed', 'Total Recovered', 'Total Deaths'\r\n\t\t],\r\n\t\tdatasets: [\r\n\t\t\t{\r\n\t\t\t\tlabel: 'Total',\r\n\t\t\t\tdata: [caseItem.TotalConfirmed, caseItem.TotalRecovered, caseItem.TotalDeaths],\r\n\t\t\t\tbackgroundColor: ['#54ff57','#1da1ff','#ff6854']\r\n\t\t\t},\r\n\t\t],\r\n\t};\r\n};\r\n\r\nconst options = {\r\n\tlegend: {\r\n\t\tdisplay: false\r\n\t },\r\n  }\r\n\r\nconst Graph: FunctionComponent<GraphProps> = ({caseItems, caseItemGlobal }: GraphProps) => {\r\n\r\n\tif (caseItems && caseItems.length > 1)\r\n\treturn (\r\n\t\t<div className='graph-container'>\r\n\t\t\t<Line data={caseItemToLineData(caseItems)} />\r\n\t\t</div>\r\n\t\t\t);\t\r\n\r\n\tif(caseItemGlobal)\r\n\treturn (\r\n\t\t<div className='graph-container'>\r\n\t\t\t<HorizontalBar data={caseItemToBarData(caseItemGlobal)} options={options}/>\r\n\t\t</div>\r\n\t\t\t);\r\n\t\r\n\treturn null;\r\n};\r\n\r\nexport default Graph;\r\n","import React from 'react';\nimport './App.scss';\nimport { Graph, CaseBox, SelectCountry } from './component';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useCountry, useCaseItem, useCaseItemGlobal } from './hooks';\nimport { CaseItem, CaseItemGlobal } from './type';\n\nfunction App() {\n\tconst { country, setCountry } = useCountry();\n\tconst { caseItems, setCaseItems } = useCaseItem();\n\tconst { caseItemGlobal, setCaseItemGlobal } = useCaseItemGlobal();\n\tconst handleSelecStatus = (caseItems: ReadonlyArray<CaseItem>, caseItemGlobal: CaseItemGlobal | undefined) => {\n\t\tsetCaseItems(caseItems);\n\t\tsetCaseItemGlobal(caseItemGlobal);\n\t};\n\treturn (\n\t\t<Container>\n\t\t\t<Row>\n\t\t\t\t<Col xs={12} md={12} lg={4}>\n\t\t\t\t\t<div className='header-title'>\n\t\t\t\t\t\t<span>COVID</span>\n\t\t\t\t\t\t<span>19</span>\n\t\t\t\t\t</div>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<Row>\n\t\t\t\t<Col xs={12} md={12} lg={5}>\n\t\t\t\t\t<SelectCountry onCountryChanged={setCountry} />\n\t\t\t\t\t<CaseBox\n\t\t\t\t\t\tcountry={country}\n\t\t\t\t\t\tonSelectStatus={handleSelecStatus}></CaseBox>\n\t\t\t\t</Col>\n\t\t\t\t<Col xs={12} md={12} lg={7}>\n\t\t\t\t\t{caseItems && <Graph caseItems={caseItems} caseItemGlobal={caseItemGlobal}></Graph>}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t</Container>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}